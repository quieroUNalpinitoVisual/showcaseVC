<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>quieroUNalpinitoVisual</title><link>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/</link><description>Recent content on quieroUNalpinitoVisual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/EdgeAntiAliasing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/EdgeAntiAliasing/</guid><description>Edge Anti Aliasing # Seccion de pruebas de el algoritmo propuesto para realizar Edge AA con shaders. Esta secci√≥n es una continuaci√≥n de anteriores entregas en las cuales ya habiamos tratado el tema de mascaras de convoluci√≥n mediante software y sus efectos en la detecci√≥n de bordes ademas de nuestra entrega acerca de los algoritmos de Super Sampling.
Pruebas del Algoritmo # Controles üïπÔ∏è # Haz click y presiona una de las siguientes teclas:</description></item><item><title/><link>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/imageProcessing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/imageProcessing/</guid><description>Image Processing # En esta secci√≥n tambien vamos a tener como referencia nuestra primera entrega en la secci√≥n de masking para afianzar los conceptos y comparar el rendimiento.
Desarrollo de los Ejercicios # Controles # Haz click y presiona una de las siguientes teclas:
‚¨ÖÔ∏è Resetear ‚û°Ô∏è Aplicar M√°scara de Ridge Imagen # Video # (puede tardar en cargar unos segundos) Implementaci√≥n # Imagen # Expand ‚Üï let baseimg; let rstimg; let maskShader; function preload(){ maskShader = readShader(&amp;quot;/showcasevc/p5files/shadersJohan/mask.</description></item><item><title/><link>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/Procedural/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/Procedural/</guid><description>Procedural Texturing # En esta secci√≥n aplicamos el ejemplo visto en clase desde el cual se generaba una textura proceduralmente aplicando el patr√≥n truchet tiles, pero en este caso, sobre un objeto distinto.
Desarrollo del Ejercicio # Implementaci√≥n # sketch.js # Expand ‚Üï let pg; let truchetShader; let frames=0; let frames2=100; function preload() { // shader adapted from here: https://thebookofshaders.com/09/ truchetShader = readShader('/showcasevc/p5files/nicholsonSketch/procedural/truchet.frag', { matrices: Tree.NONE, varyings: Tree.NONE }); } function setup() { createCanvas(400, 400, WEBGL); // create frame buffer object to render the procedural texture pg = createGraphics(400, 400, WEBGL); textureMode(NORMAL); noStroke(); pg.</description></item><item><title/><link>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quieroUNalpinitoVisualvisual.github.io/showcasevc/docs/shortcodes/shaders/texturing/</guid><description>Texturing # En esta secci√≥n implementamos otros m√©todos propuestos para la visualizaci√≥n de la luz o el brillo, haciendo uso del value de HSV y lightness de HSL.
Desarrollo de los Ejercicios # Controles üïπÔ∏è # Haz click y presiona una de las siguientes teclas:
‚¨ÖÔ∏è Resetear ‚¨áÔ∏è HSL ( L ) ‚¨ÜÔ∏è HSV ( V ) ‚û°Ô∏è Promedio Implementaci√≥n # Promedio RGB # Expand ‚Üï if(avg){ return 0.3333 * texel.</description></item></channel></rss>